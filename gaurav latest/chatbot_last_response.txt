['a) **Theory:** \nThe Jacobian matrix is used to linearize a system of differential equations around an equilibrium point. It consists of partial derivatives of the system\'s equations with respect to the state variables.\n\nb) **Mathematical Example:** \nConsider a system described by the following set of equations:\n$ \\dot{x}_1 = -x_1 + 2x_1^3 + x_2 $\n$ \\dot{x}_2 = -x_1 - x_2 $\n\nAt the equilibrium point $(0,0)$, the Jacobian matrix $J_1$ is:\n$ J_1 = \\begin{bmatrix} -1 & 1 \\\\ -1 & -1 \\end{bmatrix} $\n\nAt the equilibrium points $(-1,1)$ and $(1,-1)$, the Jacobian matrices $J_2$ and $J_3$ are:\n$ J_2 = \\begin{bmatrix} 5 & 1 \\\\ -1 & -1 \\end{bmatrix} $\n$ J_3 = \\begin{bmatrix} 5 & 1 \\\\ -1 & -1 \\end{bmatrix} $\n\nc) **Code:**\n```python\nimport numpy as np\n\nJ1 = np.array([[-1, 1], [-1, -1]])\nJ2 = np.array([[5, 1], [-1, -1]])\nJ3 = np.array([[5, 1], [-1, -1]])\n\nprint("Jacobian matrix at equilibrium point (0,0):")\nprint(J1)\n\nprint("Jacobian matrix at equilibrium point (-1,1):")\nprint(J2)\n\nprint("Jacobian matrix at equilibrium point (1,-1):")\nprint(J3)\n```']